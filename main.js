!function(){"use strict";class e{constructor(e,t){let{cardData:s,userId:r,handleCardClick:o,handleDeleteClick:i,handleLikeClick:n}=e;this._name=s.name,this._link=s.link,this._id=s._id,this._likes=s._likes,this._isLiked=s.isLiked,this._userId=r,this._userCardId=s.owner._id,this._cardSelector=t,this._handleCardClick=o,this._handleDeleteClick=i,this._handleLikeClick=n}_getTemplate(){return this._cardSelector.cloneNode(!0)}_renderLikes(){this._isLiked?(this._imageLike.classList.add("card__like-button_active"),console.log("whyamhere1"),console.log(this._isLiked),console.log(this._imageLike)):(this._imageLike.classList.remove("card__like-button_active"),console.log("whyamhere2"))}getCardView(){this._element=this._getTemplate(),this._setEventListenersCard();const e=this._element.querySelector(".card__image"),t=this._element.querySelector(".card__title");return this._imageLike=this._element.querySelector(".card__like-button"),e.src=this._link,e.alt=`Photo of ${this._name}`,t.textContent=this._name,console.log(this._id),console.log(this._likes),this._renderLikes(),this._element}updateLikeStatus(e){this._isLiked=e,this._renderLikes()}_setEventListenersCard(){this._element.querySelector(".card__image").addEventListener("click",(()=>this._handleCardClick({name:this._name,link:this._link}))),this._element.querySelector(".card__trash-button").addEventListener("click",(()=>this._handleDeleteClick(this))),this._element.querySelector(".card__like-button").addEventListener("click",(()=>this._handleLikeClick(this)))}getId(){return this._id}removeCard(){this._element.remove()}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hideInputError(e){console.log("reached here3");const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=" ",t.classList.remove(this._errorClass)}_showInputError(e){console.log("reached here2");const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}toggleButtonState(){this._hasInvalidInput(this._inputEls)?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this.toggleButtonState(),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=t,this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target===e.currentTarget||e.target.classList.contains("modal__close"))&&this.close()}))}}class r extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._formInputs=this._popupForm.querySelectorAll(".modal__input"),this._handleFormSubmit=t}_getInputValues(){const e={};return this._formInputs.forEach((t=>{e[t.name]=t.value})),e}_submitForm=e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())};setEventListeners(){console.log("helper6"),this._popupForm.addEventListener("submit",this._submitForm),super.setEventListeners()}close(){this._popupForm.reset(),super.close()}}const o=document.querySelector("#profile-edit-button"),i=document.querySelector("#profile-edit-modal"),n=document.querySelector("#preview-image-modal"),l=document.querySelector("#add-card-modal"),a=document.querySelector("#edit-avatar-modal"),c=document.querySelector("#popup-confirm-modal"),h=(i.querySelector("#profile-modal-close"),l.querySelector("#profile-add-close"),n.querySelector("#modal-preview-close"),document.querySelector(".profile__add-button")),d=document.querySelector(".profile__image"),_=document.querySelector(".profile__title"),u=document.querySelector(".profile__description"),p=document.querySelector("#profile-title-input"),m=document.querySelector("#profile-description-input"),v=(n.querySelector(".modal__footer"),a.querySelector("#edit-avatar-form")),f=i.querySelector("#edit-profile-form"),g=l.querySelector("#add-card-form"),k=document.querySelector("#card-template").content.firstElementChild,S=document.querySelector(".gallery__list"),E=(g.querySelector("#modal__input_type_title"),g.querySelector("#modal__input_type_url"),{inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:".modal__input_type_error",errorClass:".modal__error"}),C=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?(console.log(e),e.json()):Promise.reject(`Error ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}patchProfileData(e){let{name:t,description:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._checkResponse)}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}deleteCard(e){return console.log("help2"),fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}addCardLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeCardLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}patchProfileImage(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"58a7c735-ac44-49af-aeeb-e746dacd4b77","Content-Type":"application/json"}}),L=new class extends s{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector("#popup-confirm-form"),this._submitButton=this._popupElement.querySelector(".modal__button")}setSubmitAction(e){console.log("helpser4"),this._handleFormSubmit=e}_handleSubmit=e=>{e.preventDefault(),this._handleFormSubmit()};setEventListeners(){console.log("helper5"),super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),console.log("helper7"),this._handleFormSubmit()}))}}(c);L.setEventListeners();const y=new class{constructor(e,t,s){this._profileTitle=e,this._profileDescription=t,this._profileImage=s,console.log(this._profileImage)}getUserInfo(){const e={};return console.log(this._profileTitle),e.profileTitle=this._profileTitle.textContent,e.profileDescription=this._profileDescription.textContent,e}setUserInfo(e){this._profileTitle.textContent=e.name,this._profileDescription.textContent=e.about}setAvatar(e){console.log(e),this._profileImage.src=e}}(_,u,d);console.log(y);const b=t=>{const s=new e({cardData:t,userId:B,handleCardClick:e=>{P.open(e)},handleDeleteClick:I,handleLikeClick:q},k);w.addItem(s.getCardView())};function I(e){L.open(),L.setSubmitAction((()=>{C.deleteCard(e.getId()).then((()=>{e.removeCard(),L.close()})).catch((e=>{console.error(e)}))}))}function q(e){e._isLiked?C.removeCardLike(e._id).then((()=>{e.updateLikeStatus(!1)})).catch((e=>{console.error(e)})):C.addCardLike(e._id).then((()=>{e.updateLikeStatus(!0)})).catch((e=>{console.error(e)}))}const w=new class{constructor(e,t){let{renderer:s}=e;this._container=t,this._renderer=s}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:b},S);let B="";C.getAppInfo().then((e=>{let[t,s]=e;B=s._id,w.renderItems(t),y.setUserInfo(s),console.log(s)})),console.log(d);const D=new t(E,f),U=new t(E,v),T=new t(E,g);D.enableValidation(),T.enableValidation(),U.enableValidation(),console.log(i);const $=new r(l,(e=>{C.addNewCard(e).then((e=>{b(e),$.close()})).catch((e=>{console.log(e)}))})),F=new r(i,(e=>{console.log(e),C.patchProfileData(e).then((e=>{y.setUserInfo(e),F.close()})).catch((e=>{console.log(e)}))}));console.log(c);const x=new r(a,(e=>{C.patchProfileImage(e.link).then((e=>{console.log(e.avatar),y.setAvatar(e.avatar),x.close()})).catch((e=>{console.log(e)}))}));F.setEventListeners(),$.setEventListeners(),x.setEventListeners();const P=new class extends s{constructor(e){super({popupSelector:e}),this._previewImage=this._popupElement.querySelector(".modal__image"),console.log(this._previewImage),this._previewCaption=this._popupElement.querySelector(".modal__footer")}open(e){const{link:t,name:s}=e;this._previewImage.src=t,this._previewImage.alt=s,this._previewCaption.textContent=s,super.open()}setEventListeners(){super.setEventListeners()}}(n);P.setEventListeners(),d.addEventListener("click",(()=>{x.open()})),o.addEventListener("click",(()=>{const{profileTitle:e,profileDescription:t}=y.getUserInfo();p.value=e,m.value=t,F.open()})),h.addEventListener("click",(()=>{$.open(),T.toggleButtonState()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,